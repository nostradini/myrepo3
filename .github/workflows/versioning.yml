name: Versioning
on:
  # pull_request:
  #   branches: [ main ]
  #   types: [closed]
  push:
    branches: [main]
    paths-ignore:
    - 'VERSION'
  workflow_dispatch:

env:
  ENV_TOKEN: ${{ secrets.DOOR }}

jobs:
  Execute_Versioning:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      ENV_GM: ${{ steps.setvar.outputs.gitmo }}

    if: "!contains(github.event.head_commit.message, '[JOB] Push version')"
    steps:
    - uses: actions/checkout@v3
    - name: Run logic script
      run: |
          lastCommit=$(git log --format=%B -n 1 HEAD)
          echo "Last commit = " $lastCommit
          ver_str=$(cat "VERSION")
          ver_extract_str="$(cut -d' ' -f2 <<< "$ver_str")"
          echo "Version string is $ver_extract_str"
          ver_major="$(cut -d'.' -f1 <<< "$ver_extract_str")"
          ver_minor="$(cut -d'.' -f2 <<< "$ver_extract_str")"
          ver_patch="$(cut -d'.' -f3 <<< "$ver_extract_str")"
          echo "ver_major=$ver_major,ver_minor=$ver_minor,ver_patch=$ver_patch"

          lowerstr=$(echo $lastCommit |tr '[:upper:]' '[:lower:]')
          echo "transformed to lower = $lowerstr"
          
          if [[ "$lowerstr" == *"#major"* ]]
          then
          echo "Found major in commit"
          echo "gitmojiko=:boom:" >> $GITHUB_ENV
          ver_major=$((ver_major+1))
          ver_minor=0
          ver_patch=0
          elif [[ "$lowerstr" == *"#minor"* ]]
          then
          echo "Found minor in commit"
          echo "gitmojiko=:sparkles:" >> $GITHUB_ENV
          ver_minor=$((ver_minor+1))
          ver_patch=0
          elif [[ "$lowerstr" == *"#patch"* ]]
          then
          echo "Found patch in commit"
          echo "gitmojiko=:bug:" >> $GITHUB_ENV
          ver_patch=$((ver_patch+1))
          else
          echo "Default condition"
          echo "gitmojiko=:bug:" >> $GITHUB_ENV
          ver_patch=$((ver_patch+1))
          fi
          echo "ver_major=$ver_major,ver_minor=$ver_minor,ver_patch=$ver_patch"
          
          LenlastComm=${#lastCommit}
          echo "size of commit is = " $LenlastComm
          if [[ $LenlastComm -gt 50 ]]
          then
           trimLC="${lastCommit:0:50}..."
          else
           trimLC=${lastCommit}
          fi
          echo "trimmed = " $trimLC
          
          cat /dev/null > VERSION
          echo -n "Version $ver_major.$ver_minor.$ver_patch - $trimLC" > VERSION
          newver_extract=$(cat "VERSION")
          new_ver="$(cut -d' ' -f2 <<< "$newver_extract")" 
          echo "new_version=$new_ver" >> $GITHUB_ENV
    - name: Set variable
    - id: setvar
      run: |
          echo "::set-output name=gitmo::$gitmojiko"
    - name: Push changes
      run: |
          chmod +x ./script/push_ver_update.sh
          ./script/push_ver_update.sh $ENV_TOKEN

  GH_Release:
   needs: Execute_Versioning
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v3
      with: 
          fetch-depth: 0
    - name: Validating Version
      run: |
          git pull
          git fetch --all
          sh_ver_extract=$(cat "VERSION")
          sh_ver="$(cut -d' ' -f2 <<< $sh_ver_extract)" 
          echo "ver from yam= " $sh_ver
          echo "gh_sh_ver=$sh_ver" >> $GITHUB_ENV
    - name: Creating Relesae Tag
      run: |    
          chmod +x ./script/gh_release.sh
          ./script/gh_release.sh $ENV_TOKEN $gh_sh_ver

